<div class="banner-main">
  <div class="container">
    <h1><span class="gray-text"><%= icon('fas', 'chart-line') %> </span>Dashboard</h1>
    <p><%= @contract.athlete.first_name %>'s dietary dashboard.</p>
  </div>
</div>

<div class="container">
  <div class="category-padding">


  <% data_cal = {} %>
  <% data_cal_ref = {} %>


  <% @programs.each do |program| %>
    <% sum_p = sum_c =sum_l = sum_c = sum_cal = 0 %>
    <% program.meals.group_by(&:start_time).each do |day, meals| %>
      <% data_cal[day.strftime("%d/%m/%Y")] = meals.map{|meal| calorie(meal)}.sum %>
      <% data_cal_ref[day.strftime("%d/%m/%Y")] = program.calorie_target %>
    <% end %>
  <% end %>



  <% data_cal = data_cal.sort_by { |k,_| Date.strptime(k,"%d/%m/%Y") } %>
  <% data_cal_deux = {} %>

  <% data_cal.each do |day,meal| %>
  <% data_cal_deux[day] = meal  %>
  <% end %>

  <% data_cal_ref = data_cal_ref.sort_by { |k,_| Date.strptime(k,"%d/%m/%Y") } %>
  <% data_cal_ref_deux = {} %>

  <% data_cal_ref.each do |day,meal| %>
  <% data_cal_ref_deux[day] = meal  %>
  <% end %>

  <div class = "meal-graph">
<!--     <p>Calorie</p>
 -->    <canvas id="calorie"></canvas>
  </div>

    <script>

      Chart.defaults.global.title.display = false;
      Chart.defaults.global.title.fontSize = 16;

      var gradientFillcalorie = document.getElementById("calorie").getContext("2d").createLinearGradient(0, 0, 0, 400);
      gradientFillcalorie.addColorStop(0, 'rgba(186, 0, 251,0.8)');
      gradientFillcalorie.addColorStop(0.3, 'rgba(186, 0, 251,0.4)');
      gradientFillcalorie.addColorStop(1, 'rgba(186, 0, 251,0)');

      new Chart(document.getElementById("calorie").getContext("2d"), {
        type:'line',
        data:{
          labels: <%= data_cal_deux.keys.to_json.html_safe %>,
          datasets: [{
            label: "Calories",
            data: <%= data_cal_deux.values.to_json.html_safe %>,
            fill:  true,
            backgroundColor: gradientFillcalorie,
            borderColor: ['rgba(186, 0, 251,1)'],
            steppedLine: true,
            borderWidth:2,
            },{
            label: "Goal",
            lineTension: 0,
            data: <%= data_cal_ref_deux.values.to_json.html_safe %>,
            fill:  true,
            borderColor: ['rgba(0, 0, 0, 1)'],
            backgroundColor: ['rgba(255, 255, 255,0)'],
            steppedLine: true,
            borderDash: [5, 5],
            pointRadius: 0,
            borderWidth:1
          }],
        },
        options: {
          elements: {
            point:{
              radius: 1,
              backgroundColor:['rgba(186, 0, 251,1)']
            }
          },
          legend: {
            display: true,
            position: 'right',
            labels: {
              fontColor: 'rgba(0, 0, 0,1)',
              fontSize : 12,
            }
          },
          responsive: true,
          title:{
              display: true,
              text:"Calories"
          },
          scales:{
            xAxes: [{
              type: 'time',
              time: {
              parser: 'DD/MM/YYYY',
              tooltipFormat: 'DD/MM/YYYY',
              unitStepSize: 7,
              unit: 'day',
              displayFormats: {
                'day': 'DD/MM'
                }
              },
              gridLines: {
                display: true,
                lineWidth:1
              },
              ticks: {
                autoSkip: true,
                maxTicksLimit: 20,
                beginAtZero: true,
              },
            }], // XAxes ends
            yAxes: [{
              gridLines: {
                display: true,
                lineWidth:1
              },
              scaleLabel: {
                display: true,
                labelString: 'Kcal'
              },
              ticks: {
                max: <%= (data_cal_deux.values.max/2000.0).ceil * 2000 %>,
                min: 0
              },
            }]
          }
        }
    });
  </script>



<!-- plot macro -->

  <% data_p = {} %>
  <% data_l = {} %>
  <% data_c = {} %>

<!-- create my macro/date object -->
  <% @programs.each do |program| %>
    <% program.meals.group_by(&:start_time).each do |day, meals| %>
      <% data_p[day] = meals.map{|meal| meal.proteins}.sum %>
      <% data_l[day] = meals.map{|meal| meal.fats}.sum %>
      <% data_c[day] = meals.map{|meal| meal.carbs}.sum  %>
    <% end %>
  <% end %>


  <% data_p_ref = {} %>
  <% data_l_ref = {} %>
  <% data_c_ref = {} %>

  <!-- create my reference/date object -->
  <% @programs.each do |program| %>
    <% program.meals.group_by(&:start_time).each do |day, meals| %>
      <% data_p_ref[day] = program.proteins_target %>
      <% data_l_ref[day] = program.fats_target %>
      <% data_c_ref[day] = program.carbs_target %>
    <% end %>
  <% end %>


  <% max_scale = [data_p.map {|array| array[1]}.max,
                  data_l.map {|array| array[1]}.max,
                  data_c.map {|array| array[1]}.max,
                  data_p_ref.map {|array| array[1]}.max,
                  data_l_ref.map {|array| array[1]}.max,
                  data_c_ref.map {|array| array[1]}.max].max.round(-2) + 100  %>



<!-- on sort par les dates -->

    <div class="macrograph">
      <div class="meal-graph_macro">
<!--         <p> Protein</p>
 -->        <canvas id = "proteins" style = "width:330;height:330" > </canvas>
      </div>
      <div class="meal-graph_macro">
<!--           <p> Fats</p>
 -->        <canvas id = "fats" style = "width:330;height:330"> </canvas>
      </div>
      <div class="meal-graph_macro">
<!--         <p> Carbs</p>
 -->        <canvas id = "carbs" style = "width:330;height:330"> </canvas>
      </div>
    </div>

  <% sorted_p_dates = data_p.keys.sort %>
  <% sorted_l_dates = data_l.keys.sort %>
  <% sorted_c_dates = data_c.keys.sort %>

  <script>

    Chart.defaults.global.title.display = false;
    Chart.defaults.global.title.fontSize = 16;

    var p = document.getElementById("proteins").getContext("2d").createLinearGradient(0, 0, 0, 400);
    p.addColorStop(0, 'rgba(251, 19, 0, 1)');
    p.addColorStop(0.4, 'rgba(251, 19, 0, 0.5)');
    p.addColorStop(1, 'rgba(251, 19, 0, 0)');

   new Chart(document.getElementById("proteins").getContext("2d"), {
      type:'line',
      data:{
        labels: <%= sorted_p_dates.map {|date| date.strftime("%d/%m/%Y") }.to_json.html_safe %>,
        datasets: [{
          label: "Proteins",
          data: <%= sorted_p_dates.map {|date| data_p[date]} %>,
          fill:  true,
          borderColor: ['rgba(251, 19, 0, 1)'],
          backgroundColor: p,
          steppedLine: true,
          borderWidth:2
          },{
          label: "Goal",
          lineTension: 0,
          data: <%= data_p_ref.values.to_json.html_safe %>,
          fill:  false,
          borderColor: ['rgba(0, 0, 0, 1)'],
          backgroundColor: ['rgba(255, 255, 255,0)'],
          steppedLine: true,
          borderDash: [5, 5],
          pointRadius: 0,
          borderWidth:1
        }],
      },
      options: {
        elements: {
          point:{
            radius: 1,
            backgroundColor:['rgba(251, 19, 0, 1)']
          }
        },
        legend: {
          display: false,
          position: 'bottom',
          labels: {
              fontColor: 'rgba(0, 0, 0,1)'
          }
        },
        maintainAspectRatio:false,
        responsive: true,
        title:{
            display: true,
            text:"Proteins"
        },
        scales:{
          xAxes: [{
            type: 'time',
            //
            time: {
              parser: 'DD/MM/YYYY',
              tooltipFormat: 'DD/MM/YYYY',
              unitStepSize: 7,
              unit: 'day',
              displayFormats: {
                'day': 'DD/MM'
                }
              },
            ticks: {
              autoSkip: true,
              maxTicksLimit: 20
            }
          }], // XAxes ends
          yAxes: [{
              scaleLabel: {
                display: true,
                labelString: 'Mass (Gr)'
              },
              ticks: {
                max: <%=  (data_p_ref.values.max/100.0).ceil * 150 %>,
                min: 0,
              }
          }]
        }
      }
    });



    var l = document.getElementById("fats").getContext("2d").createLinearGradient(0, 0, 0, 400);
    l.addColorStop(0, 'rgba(251, 240, 0,1)');
    l.addColorStop(0.3, 'rgba(251, 240, 0,0.7)');
    l.addColorStop(1, 'rgba(251, 240, 0,0)');

    new Chart(document.getElementById("fats").getContext("2d"), {
      type:'line',
      data:{
        labels: <%= sorted_l_dates.map {|date| date.strftime("%d/%m/%Y") }.to_json.html_safe %>,
        datasets: [{
          label: "Fats",
          data: <%= sorted_l_dates.map {|date| data_l[date]} %>,
          fill:  true,
          borderColor: ['rgba(251, 240, 0, 1)'],
          backgroundColor: l,
          steppedLine: true,
          borderWidth:2
          },{
          label: "Goal",
          lineTension: 0,
          data: <%= data_l_ref.values.to_json.html_safe %>,
          fill:  false,
          borderColor: ['rgba(0, 0, 0, 1)'],
          backgroundColor: ['rgba(255, 255, 255,0)'],
          steppedLine: true,
          borderDash: [5, 5],
          pointRadius: 0,
          borderWidth:1
        }],
      },
      options: {
        elements: {
          point:{
            radius: 1,
            backgroundColor:['rgba(251, 240, 0, 1)']
          }
        },
        legend: {
          display: false,
          position: 'bottom',
          labels: {
            fontColor: 'rgba(0, 0, 0,1)'
          }
        },
        maintainAspectRatio:false,
        responsive: true,
        title:{
            display: true,
            text:"Fats"
        },
        scales:{
          xAxes: [{
            type: 'time',
            //
            time: {
              parser: 'DD/MM/YYYY',
              tooltipFormat: 'DD/MM/YYYY',
              unit: 'day',
              unitStepSize: 7,
              displayFormats: {
                'day': 'DD/MM'
                }
              },
            ticks: {
              autoSkip: true,
              maxTicksLimit: 20
            }
          }], // XAxes ends
          yAxes: [{
              scaleLabel: {
                display: true,
                labelString: ''
              },
              ticks: {
                max: <%=  (data_l_ref.values.max/100.0).ceil * 100 %>,
                min: 0,
              }
          }]
        }
      }
    });


    var c = document.getElementById("carbs").getContext("2d").createLinearGradient(0, 0, 0, 400);
    c.addColorStop(0, 'rgba(0, 221, 251,0.8)');
    c.addColorStop(0.3, 'rgba(0, 221, 251,0.4)');
    c.addColorStop(1, 'rgba(0, 221, 251,0)');

    new Chart(document.getElementById("carbs").getContext("2d"), {
      type:'line',
      data:{
        labels: <%= sorted_c_dates.map {|date| date.strftime("%d/%m/%Y") }.to_json.html_safe %>,
        datasets: [{
          label: "Carbs",
          data: <%= sorted_c_dates.map {|date| data_c[date]} %>,
          fill:  true,
          borderColor: ['rgba(0, 221, 251, 1)'],
          backgroundColor: c,
          steppedLine: true,
          borderWidth:2
          },{
          label: "Goal",
          lineTension: 0,
          data: <%= data_c_ref.values.to_json.html_safe %>,
          fill:  false,
          borderColor: ['rgba(0, 0, 0, 1)'],
          backgroundColor: ['rgba(255, 255, 255,0)'],
          steppedLine: true,
          borderDash: [5, 5],
          pointRadius: 0,
          borderWidth:1
        }],
      },
      options: {
        elements: {
          point:{
            radius: 1
          }
        },
        legend: {
          display: false,
          position: 'bottom',
          labels: {
              fontColor: 'rgba(0, 0, 0,1)'
          }
        },
        maintainAspectRatio:false,
        responsive: true,
        title:{
            display: true,
            text:"Carbs"
        },
        scales:{
          xAxes: [{
            type: 'time',
            //
            time: {
              parser: 'DD/MM/YYYY',
              tooltipFormat: 'DD/MM/YYYY',
              unit: 'day',
              unitStepSize: 7,
              displayFormats: {
                'day': 'DD/MM'
              }
            },
            ticks: {
              autoSkip: true,
              maxTicksLimit: 20
            }
          }], // XAxes ends
          yAxes: [{
              scaleLabel: {
                display: true,
                labelString: ''
              },
              ticks: {
                max: <%=   (data_c_ref.values.max/100.0).ceil * 100 %>,
                min: 0,
              }
          }]
        }
      }
    });

  </script>


<!-- Table -->
  <div class = "table-nutri">
    <% [@programs.last].each do |program| %>  <!-- so only last programs is displayed -->
    <% sum_p = sum_c =sum_l = sum_c = sum_cal = 0 %>
      <table class = "nutri-table-meal">
        <thead>
          <tr>
            <th> <p></p>  </th>
            <th> <div class = "header"> <p> <i class="fas fa-drumstick-bite"></i>  Protein </p>  <span> <%= (program.proteins_target - 10).to_i %> - <%= (program.proteins_target + 10).to_i %></span></div>  </th>
            <th> <div class = "header"> <p> <i class="fas fa-cheese"></i> Fats </p>  <span> <%= (program.fats_target - 5).to_i %> - <%= (program.fats_target + 5).to_i %></span></div>  </th>
            <th> <div class = "header"> <p> <i class="fas fa-bread-slice"></i> Carbs </p>  <span> <%= (program.carbs_target - 20).to_i %> - <%= (program.carbs_target + 20).to_i %></span></div>  </th>
            <th> <div class = "header"> <p> <i class="fas fa-burn"></i> Calories </p>  <span> <%= (program.calorie_target - 200).to_i %> - <%= (program.calorie_target + 200).to_i %></span></div>  </th>
            <th>  </th>
          </tr>
        </thead>
        <tbody>
          <% program.meals.group_by(&:start_time).sort.each do |day, meals| %>
            <% col_protein = (meals.map{|meal| meal.proteins}.sum() - program.proteins_target).abs > 10 ? "red" : "green" %>
            <% col_fats = (meals.map{|meal| meal.fats}.sum() - program.fats_target).abs > 5 ? "red" : "green" %>
            <% col_carbs = (meals.map{|meal| meal.carbs}.sum() - program.carbs_target).abs > 20 ? "red" : "green" %>
            <% col_calorie = (meals.map{|meal| calorie(meal)}.sum() - program.calorie_target).abs > 200 ? "red" : "green" %>
            <tr class = <%= (col_protein == "green" and col_fats == "green" and col_carbs == "green" and col_calorie == "green") ? "perfectday" : "badday" %>   >
              <td> <div class = <%= (col_protein == "green" and col_fats == "green" and col_carbs == "green" and col_calorie == "green") ? "bargreen" : "barred" %>> <%= link_to day.strftime("%d/%m/%Y"), program_meals_path(program, date:meals.last.start_time) %> </div> </td>
              <td> <p style="color: <%= col_protein %>;font-size:16px;font-weight: bold;">  <%= meals.map{|meal| meal.proteins}.sum() %> </p></td>
              <td> <p style="color: <%= col_fats %>;font-size:16px;font-weight: bold;">  <%= meals.map{|meal| meal.fats}.sum() %> </p> </td>
              <td> <p style="color: <%= col_carbs %>;font-size:16px;font-weight: bold;">  <%= meals.map{|meal| meal.carbs}.sum() %> </p> </td>
              <td>
                <p style="color: <%= col_calorie %>;font-size:16px;font-weight: bold;">  <%= meals.map{|meal| calorie(meal)}.sum() %> </p>
              </td>
              <td>
                <div class = "symbol">
                  <% if col_protein == "green" and col_fats == "green" and col_carbs == "green" and col_calorie == "green" %>
                    <p><i class="fas fa-check"></i> </p>
                  <% else %>
                    <p> <i class="fas fa-times"></i> </p>
                  <% end %>
                </div>
              </td>
              <% sum_p = sum_c =sum_l = sum_c = sum_cal = 0 %>
            </tr>
          <% end %>
        </tbody>
      </table>
    <% end %>
  </div>
</div>





</div>
